/*

Selected code from Employee data base Version 2.0

Dan Ross             

	2001:Original
	Dec 2013:Patched up some junk
	Apr 2016:Fixed weird type cast issue with function pointers for VS2013

Uses an array of structures to hold the database.

Generates unique employee ID's

Compresses the database

Uses a command-line option to allow the user to specify
the name of the database file that will be opened when
the program starts.  For example:

c:>db.exe mydata.dat

Uses a binary file with the following format:
An integer containing the next available customer ID number.
An integer containing the number of records.
The records.

Uses dynamic memory allocation to create a dynamic array that
is 5 elements bigger than the database file.  Loads the data
from the file into the dynamic array.

Stores the data in the dynamic array in unsorted format.
Deletes records by setting a field to NULL.
Keeps track of the number of records when deletions and
additions are performed.

When the dynamic array is full, allocates a new dynamic array
that is 5 elements bigger than the number of records
(not the size of the dynamic array).  Copies the non-null elements
from the old dynamic array to the new dynamic array.
Frees the memory for the old dynamic array.

Provides a menu option that prompts the user for a file name,
then saves the current data to a file.  Does not save empty records.

Uses a flag to keep track of unsaved changes to the database,
and prompts the user to save (Y/N) when the program is terminated.

Has a sub-menu to the list command that allows the user to select
the field on which to sort the data for display.
Does not sort the data itself.  Instead, creates an array of pointers
to the data array elements, and uses an optimized bubble sort
algorithm to sort the pointer values so that they point to the
data in "sorted" order.
Displays the data by looping through the array of pointers.

The user will choose which field element to sort on
(last name, first name, etc.), there are several corresponding
comparison functions.  Initializes an array of function pointers
to these comparison functions.  Calls the appropriate comparison
function in the bubblesort routine using the appropriate
function pointer array element.

*/

#define INCR 5

#include "stdio.h"
#include "stdlib.h"
#include "conio.h"
#include "string.h"
#include "ctype.h"
#pragma warning (disable:4996)

// the struct
struct employee {
	int ID;
	char lname[80];
	char fname[80];
	double sal;
};
struct employee * db;   // a pointer to the data

// globals
int rec_count = 0;
int db_size = 0;
int nextID = 1;
char g_filename[80] = "";
char needsave = 0;

// function declarations
void print_menu(void);
void add(void);
void modify(void);
void cmpr(void);
void del(void);
void list(void);
long get_new_ID();
int find(int);
void make_cap(char *);
void open(char *);
void initdb(int, int);
void save(void);
void quit(void);

/*
	Generalized bubblesort algorithm, can sort anything
	
	Arguments:
	a is a pointer to an array of things of any type
	num is how many things
	width is how many bytes one thing is
	"the 4th argument" is a pointer to a comparison function

*/
void bsort(void * a, int num, int width, int(*compare)(void *elem1, void *elem2));

// comparison function prototypes
int comp1(struct employee **, struct employee **);
int comp2(struct employee **, struct employee **);
int comp3(struct employee **, struct employee **);
int comp4(struct employee **, struct employee **);

// initialize the array of pointers to the comparison functions
int(*compfunc[4])(struct employee ** a, struct employee ** b) = {
	comp1, comp2, comp3, comp4
};

void main(int argc, char * argv[])
{
	char ch;

	// check for too many command line arguments
	if (argc > 2) {
		printf("Usage: %s <data file name>\n", argv[0]);
		exit(1);
	}

	// check if user has supplied a file name on command line
	if (argc == 2) {

		// save filename
		strcpy(g_filename, argv[1]);

		// attempt to open file...
		open(g_filename);

	}
	else
	{
		// initialize empty database
		rec_count = 0;
		db_size = INCR;
		nextID = 1;

		// allocate some memory
		db = (employee *) malloc(sizeof(struct employee) * db_size);
		initdb(0, db_size - 1);
	}

	print_menu();

	do {
		ch = getche();
		switch (ch) {
		case 'a':
		case 'A':
			add();
			break;
		case 'm':
		case 'M':
			modify();
			break;
		case 'l':
		case 'L':
			list();
			break;
		case 'c':
		case 'C':
			cmpr();
			break;
		case 'd':
		case 'D':
			del();
			break;
		case 's':
		case 'S':
			save();
			break;
		case 'q':
		case 'Q':
			quit();
			break;
		default:
			printf("\nPlease re-enter:");
		}
	} while (toupper(ch) != 'Q');

}


/*
Opens a file and loads it's contents
into the database.

Assumes that if the file exists, it has valid
data and loads the data.

If the file does not exist, it
initializes the database to an initial empty state.

Uses a binary file with the following format:
An integer containing the next available customer ID number.
An integer containing the number of records.
The records.

Uses dynamic memory allocation to create a dynamic array that
is 5 elements bigger than the database file.  Loads the data
from the file into the dynamic array.

*/
void open(char * filename)
{

	FILE *fp;
	int i;

	// open file
	if ((fp = fopen(filename, "rb")) == NULL)
	{

		// initialize empty database
		rec_count = 0;
		needsave = 0;
		db_size = INCR;
		nextID = 1;

		// allocate some memory
		db = (employee *) malloc(sizeof(struct employee) * db_size);
		initdb(0, db_size - 1);

	}
	else
	{

		// load data from file

		// read nextID and rec_count
		fread(&nextID, sizeof nextID, 1, fp);
		fread(&rec_count, sizeof rec_count, 1, fp);
		db_size = rec_count + INCR;

		// allocate some memory
		db = (struct employee *) malloc(sizeof(struct employee) * (db_size));

		// read records into memory
		for (i = 0; i < rec_count; i++)
			fread(&db[i], sizeof(struct employee), 1, fp);

		// initialize remaining records in database
		initdb(rec_count, db_size - 1);

		fclose(fp);

	}

}


/*
Creates a file and writes the database to
the file.

If the file exists, overwrites it without
prompting.

Uses a binary file with the following format:
An integer containing the next available customer ID number.
An integer containing the number of records.
The records.

*/
void save(void)
{
	FILE *fp;
	int i;
	char filename[80] = "";

	// get filename
	printf("\nEnter file name [default: %s]: ", g_filename);
	fflush(stdin);
	gets(filename);

	// use default?
	if (!filename[0]) {
		strcpy(filename, g_filename);
	}

	// open file
	if ((fp = fopen(filename, "wb")) == NULL) {
		printf("error opening file\n");
		return;
	}

	// write nextID and rec_count
	fwrite(&nextID, sizeof nextID, 1, fp);
	fwrite(&rec_count, sizeof rec_count, 1, fp);

	// write non-blank records
	for (i = 0; i < db_size; i++)
		if (db[i].lname[0])
			fwrite(&db[i], sizeof(struct employee), 1, fp);

	fclose(fp);
	needsave = 0;

	// let user know we are done
	printf("\nData Saved.  Press any key to continue.");
	getche();
	print_menu();

}


/*
Prints out the entire database.
*/
void list(void)
{
	int i, j;
	int op;
	struct employee ** db_p;

	// bail if no records
	if (rec_count == 0)
	{
		printf("\nNo records exist.  Press any key to continue. ");
		getche();
		print_menu();
		return;
	}

	// display submenu
	printf("\n\n");
	printf("       Sort by Which Field?\n");
	printf("---------------------------\n");
	printf("       1) ID\n");
	printf("       2) Last Name\n");
	printf("       3) First Name\n");
	printf("       4) Salary\n");

	fflush(stdin);
	do {
		printf("\nEnter [1,2,3,4]: ");
		scanf("%d", &op);
	} while (op < 1 || op > 4);

	// initialize pointers to pointers
	// to point to non-blank records

	// get an array of pointers and point to it (multiple indirection)
	db_p = (employee **) malloc(rec_count * sizeof(struct employee *));

	// point to non blank records
	for (i = 0, j = 0; i < db_size; i++)
		if (db[i].lname[0]) {
			db_p[j] = &db[i];
			j++;
		}

	// sort the pointers
	bsort(db_p, rec_count, sizeof(struct employee *), (int (__cdecl*) (void *, void *)) *compfunc[op - 1]);

	// Display table heading
	printf("\n\n    ID Last                 First                    Salary\n");
	printf("----------------------------------------------------------\n");

	// Print data using array of pointers.  
	for (i = 0; i < rec_count; i++)
		printf("%6d %-20s %-20s %10.2lf\n", db_p[i]->ID, db_p[i]->lname, db_p[i]->fname, db_p[i]->sal);

	// give the memory back to the system
	free(db_p);

	// let user catch up to what is happening to them
	printf("\nPress any key to continue.");
	getche();
	print_menu();

}


/*
Adds an employee to the database
*/
void add(void)
{
	char str[80];
	int i;
	struct employee * old_db;

	// find a blank place to put this new record
	for (i = 0; i < db_size; i++){
		if (!db[i].lname[0])
			break;
	}

	// is the database full?
	if (i >= db_size) {

		// make database bigger

		// store pointer
		old_db = db;

		// initialize empty database
		db_size += INCR;

		// allocate some memory
		db = (struct employee *) malloc(sizeof(struct employee) * db_size);
		initdb(0, db_size - 1);

		// copy old records to new db
		// (there are no blank records)
		for (i = 0; i <= db_size - 1 - INCR; i++)
			db[i] = old_db[i];

		// deallocate the memory
		free(old_db);

	}

	// get data from user and put in database
	printf("\nEnter last name to add : ");
	fflush(stdin);
	gets(str);
	make_cap(str);
	strcpy(db[i].lname, str);

	printf("Enter first name to add : ");
	gets(str);
	make_cap(str);
	strcpy(db[i].fname, str);

	printf("Enter salary : ");
	scanf("%lf", &db[i].sal);

	db[i].ID = nextID++;

	rec_count++;
	needsave = 1;

	print_menu();

}


/*
Optimized bubble sort.
Sorts an array of anything.

Receives a pointer to a destination array,
the number of elements in the array, and the size of
each array element (width).

Receives a pointer to a comparison function
used to compare array elements.
*/
void bsort(void * a, int num, int width, int(*compare)(void *, void *))
{
	int i, j;
	void * temp;  // a buffer
	int swaps;

	//printf("\n%6d\n", (* (struct employee *) a).ID      );   // useless...

	// allocate a temp value of the proper size
	temp = malloc(width);

	// bubble sort the array
	for (i = 0; i < num; i++) {
		swaps = 0;
		for (j = num - 1; j > i; j--)
			if (compare((char *)a + (j * width), (char *)a + (j - 1) * width) < 0 /*(*a[j]).sal < (*a[j - 1]).sal*/) {

				// swap the elements
				memcpy(temp, (char *)a + (j * width), width);
				memcpy((char *)a + (j * width), (char *)a + (j - 1) * width, width);
				memcpy((char *)a + (j - 1) * width, temp, width);

				/*
				we are using memcpy to swap...
				here's what we are really doing, except array indexing won't
				work because function does not know the size of the array elements.
				memcpy copies width bytes to *arg1 from *arg2

				temp = a[j];
				a[j] = (a[j - 1]);
				(a[j - 1]) = temp;
				*/

				swaps = 1;
			}
		if (!swaps)
			return;
	}

	free(temp);

}


/*
employee comparison functions
*/
int comp1(struct employee ** a, struct employee ** b)
{
	return ((*a)->ID - (*b)->ID);
}


int comp2(struct employee ** a, struct employee ** b)
{
	return strcmp((*a)->lname, (*b)->lname);
}


int comp3(struct employee ** a, struct employee ** b)
{
	return strcmp((*a)->fname, (*b)->fname);
}


int comp4(struct employee ** a, struct employee ** b)
{
	return (int)((*a)->sal - (*b)->sal);

}



